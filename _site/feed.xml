<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-13T16:00:27-04:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Got JSON, Now What?</title><link href="http://localhost:4000/2022/10/13/GotJSON.html" rel="alternate" type="text/html" title="Got JSON, Now What?" /><published>2022-10-13T00:00:00-04:00</published><updated>2022-10-13T00:00:00-04:00</updated><id>http://localhost:4000/2022/10/13/GotJSON</id><content type="html" xml:base="http://localhost:4000/2022/10/13/GotJSON.html"><![CDATA[<p>There comes a time in every developers life where you have to GET some data from an API endpoint, display it ever so lovingly on the world wide web and not freak out about it. We will use the <a href="https://swapi.dev/">Star Wars API</a> and display that to the browser. I promise this article will be a blast.
The act of sending and receiving data over the web is known as an AJAX call. This allows browsers to send and retrieve information, that developers can manipulate to do many different things. There are five main HTTP methods to do this, GET, POST, PUT, PATCH, and DELETE. If you need a refresher the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">MDN docs</a> breaks down HTTP methods. This article will only focus on GET.
According to the MDN docs the GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
This is a READ ONLY method and we have no risks of corrupting or mutating data. So let’s dive into using the Javascript Fetch() API to fetch some star wars data.
We want to get all of the Star Wars Movies according to the <a href="https://swapi.dev/documentation#films">Star Wars API Docs</a> we can call this:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"> <span class="kd">const</span> <span class="nx">baseURL</span> <span class="o">=</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//swapi.dev/api/films/</span>

<span class="nx">fetch</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">);</span> </code></pre></figure>

<p>Fetch will return a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a>. In order to do anything with what we fetched it needs to be written in a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">.then</a> call which returns a promise:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fetch</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">)</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">))</span></code></pre></figure>

<p>I wanted to console.log the response to show that fetch is responding back with an object..</p>

<p>Well this is interesting.. How do we now get the data. We know from the Star Wars API docs that JSON is the standard data format provided by SWAPI by default. The Fetch <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/json">.json</a> method will convert to JSON!!</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fetch</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">)</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span></code></pre></figure>

<p>Oh Joy! We got our list of films. Take a peek in the console.</p>

<p>Oh No! Did we do something wrong?!? Wait a second I see some movies in a field called results! Lets try this again..</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">fetch</span><span class="p">(</span><span class="nx">baseURL</span><span class="p">)</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">));</span></code></pre></figure>

<p>Amazing and congrats! We are getting our films!! Now what?? We could do a forEach() on that Array and display it or go next level. The Star Wars API gives us the ability to use search with our params. Next article we will wire up a form, use the user input as a search param, use that forEach() on results and attempt to display an GET request from the Star Wars API!
Until the next time we kick it together…</p>]]></content><author><name>B-rad</name></author><category term="Web Development" /><category term="Javascript" /><category term="APIs" /><summary type="html"><![CDATA[There comes a time in every developers life where you have to GET some data from an API endpoint, display it ever so lovingly on the world wide web and not freak out about it. We will use the Star Wars API and display that to the browser. I promise this article will be a blast. The act of sending and receiving data over the web is known as an AJAX call. This allows browsers to send and retrieve information, that developers can manipulate to do many different things. There are five main HTTP methods to do this, GET, POST, PUT, PATCH, and DELETE. If you need a refresher the MDN docs breaks down HTTP methods. This article will only focus on GET. According to the MDN docs the GET method requests a representation of the specified resource. Requests using GET should only retrieve data. This is a READ ONLY method and we have no risks of corrupting or mutating data. So let’s dive into using the Javascript Fetch() API to fetch some star wars data. We want to get all of the Star Wars Movies according to the Star Wars API Docs we can call this:]]></summary></entry><entry><title type="html">Another Fun Hacktober Fest</title><link href="http://localhost:4000/2022/10/01/Hacktoberfest.html" rel="alternate" type="text/html" title="Another Fun Hacktober Fest" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4000/2022/10/01/Hacktoberfest</id><content type="html" xml:base="http://localhost:4000/2022/10/01/Hacktoberfest.html"><![CDATA[<p>October is one of my favorite months. The weather finally starts to cool, halloween is my favorite holdiay and contributing to open source becomes a monthly celebration. Hacktober Fest was started by <a href="https://www.digitalocean.com/">Digital Ocean</a> as a way to promote and celebrate contributing to open source projects. It’s been an annual event for the last 9 years. When you complete the challenge of 4 approved pull requests you get some swag. I have t shirts from the last five years however this year they let you plant a tree in your name. As much as I love their swag, I love that option and will do the tree this year.</p>

<p>What are open source projects?</p>

<p>It’s an style of sharing and collabrotive development so products are open and free to use by developers for developers. I’ve been a huge fan of open source. As someone who is self taught it’s been a boone for my skills and even gained some friendships along the way.</p>

<p>If you want to grow your skills contribute to open source.
Hacktober Fest as this great resource for beginners :
<a href="https://hacktoberfest.com/participation/#beginner-resources">Beginner Resources</a></p>

<p>Also I enjoy helping out the MDN communtiy. A great place to start is bugzilla. 
They have bugs that are easy to fix yet they make you familiar with the mozilla development process.
<a href="https://bugzilla.mozilla.org/buglist.cgi?quicksearch=good-first-bug">Bugzilla</a></p>

<p>Click here for <a href="https://github.com/topics/hacktoberfest">Hacktober Fest Repos</a> and just have fun contributing!</p>

<p>💖 Brad</p>]]></content><author><name>B-rad</name></author><category term="Hacktoberfest" /><category term="Open Source" /><category term="Git" /><summary type="html"><![CDATA[October is one of my favorite months. The weather finally starts to cool, halloween is my favorite holdiay and contributing to open source becomes a monthly celebration. Hacktober Fest was started by Digital Ocean as a way to promote and celebrate contributing to open source projects. It’s been an annual event for the last 9 years. When you complete the challenge of 4 approved pull requests you get some swag. I have t shirts from the last five years however this year they let you plant a tree in your name. As much as I love their swag, I love that option and will do the tree this year.]]></summary></entry><entry><title type="html">Welcome to the JAMstack</title><link href="http://localhost:4000/2022/09/21/JAMstack.html" rel="alternate" type="text/html" title="Welcome to the JAMstack" /><published>2022-09-21T00:00:00-04:00</published><updated>2022-09-21T00:00:00-04:00</updated><id>http://localhost:4000/2022/09/21/JAMstack</id><content type="html" xml:base="http://localhost:4000/2022/09/21/JAMstack.html"><![CDATA[<p>In 2016 Mathias Billmann presented the idea of using client side Javascript , APIs and Markdown at an Smashing Con 2016. This idea of decoupling backend and empowering the front end developers was revolutionary. Since than, the Jamstack has matured and is coming to its own. An developer can build blogs, small to medium business site, even complex enteprise ecommerce archetitecture around its principles. The flexibility to make your grandmas blog <a href="https://www.11ty.dev/">11ty</a> and add an headless cms <a href="https://www.sanity.io/">Sanity</a>, throw on an shopping cart with <a href="https://snipcart.com/">Snipcart</a>, charge with stripe<a href="https://stripe.com/">Stripe</a> to make some dough from her macrame.  Seems like a great series for this blog, stay tuned for grandmas macrame shop.</p>

<p>My blog will morph and it’s voice will change. My posts might not be frequent but I’ll try give quality.  I work in ecommerce and spend my time developing whatever my design and marketing departments desire. Current themes will be front end, jamstack and general web development topics that I find interesting.  The themes can and will change, I read and get inspired from <a href="https://www.smashingmagazine.com/">smashing magazine</a>,<a href="https://www.freecodecamp.org/">freecodecamp</a> videos, Sir <a href="https://wesbos.com/">Wes Bos</a>, <a href="https://tldr.tech/">tldr</a> and <a href="https://jamstack.email/">the jamstack</a> newsletters .  It’s a wonderful time to be a front end developer so let’s learn and grow together.</p>

<p>“A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup”
— Mathias Biilmann (CEO &amp; Co-founder of Netlify).</p>

<p>All started by this presentation:</p>
<iframe src="https://player.vimeo.com/video/163522126?h=5649e8d349&amp;title=0&amp;byline=0&amp;portrait=0" max-width="640" max-height="360" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen=""></iframe>
<p>Credit for Video: <a href="https://vimeo.com/163522126">SmashingConf San Francisco 2016 - Mathias Biilmann: The New Front-end Stack. Javascript, APIs and Markup</a> from <a href="https://vimeo.com/smashingmagazine">Smashing Magazine</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

<p>💖 Brad</p>]]></content><author><name>B-rad</name></author><category term="Jamstack" /><category term="Web Development" /><category term="Javascript" /><summary type="html"><![CDATA[In 2016 Mathias Billmann presented the idea of using client side Javascript , APIs and Markdown at an Smashing Con 2016. This idea of decoupling backend and empowering the front end developers was revolutionary. Since than, the Jamstack has matured and is coming to its own. An developer can build blogs, small to medium business site, even complex enteprise ecommerce archetitecture around its principles. The flexibility to make your grandmas blog 11ty and add an headless cms Sanity, throw on an shopping cart with Snipcart, charge with stripeStripe to make some dough from her macrame. Seems like a great series for this blog, stay tuned for grandmas macrame shop.]]></summary></entry></feed>